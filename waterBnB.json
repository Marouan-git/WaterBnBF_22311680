[
    {
        "id": "da07724f8a77bd94",
        "type": "tab",
        "label": "WaterBnB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eb248cf8d9bb8b3d",
        "type": "group",
        "z": "da07724f8a77bd94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1578c3c85b482574",
            "2bfb64f79adf93d4",
            "559103ed692582ea"
        ],
        "x": 94,
        "y": 399,
        "w": 772,
        "h": 142
    },
    {
        "id": "2ba75dc7d834e65f",
        "type": "group",
        "z": "da07724f8a77bd94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "52e27427cb011778",
            "6ccafce628679297"
        ],
        "x": 94,
        "y": 299,
        "w": 412,
        "h": 82
    },
    {
        "id": "fa1f3f939ae5167b",
        "type": "group",
        "z": "da07724f8a77bd94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fdf85c7a8d4d995a",
            "79e17e17bd6621d0",
            "7fee4dd69ee337ac",
            "86c23bf3f05c5a2b",
            "957f41ad8f4ee9eb",
            "ab44aa0947b46483",
            "55b6618fb271a0b2",
            "6f5df02fce4baf5a"
        ],
        "x": 94,
        "y": 579,
        "w": 1012,
        "h": 182
    },
    {
        "id": "61f55d09f471d3df",
        "type": "group",
        "z": "da07724f8a77bd94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f5d7429b142909fc",
            "1a8a587959353e1d",
            "0868e7875e27bf9e"
        ],
        "x": 94,
        "y": 1019,
        "w": 532,
        "h": 162
    },
    {
        "id": "e725f092e406a413",
        "type": "group",
        "z": "da07724f8a77bd94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "385e1853b8df1931",
            "ab820f748ffb8f80",
            "e3dc83ff8198863c",
            "04c03632189f535a"
        ],
        "x": 94,
        "y": 839,
        "w": 812,
        "h": 142
    },
    {
        "id": "36af78b0364a0904",
        "type": "inject",
        "z": "da07724f8a77bd94",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "ea433f679e50bcd4"
            ]
        ]
    },
    {
        "id": "ea433f679e50bcd4",
        "type": "function",
        "z": "da07724f8a77bd94",
        "name": "Téléportation",
        "func": "// create random position\nvar lat = 43.61999752 + Math.random() * 0.1;\nvar lon = 7.0499998 + Math.random() * 0.1;\nmsg.payload={\n    layer:\"swimming pools\",\n    lat:lat, \n    lon:lon, \n    name:global.get(\"clientid\"), \n    description: \"Temperature in my swimming pool\",\n    value: 20.5,\n    unit: \"°C\",\n    icon:\"male\", \n    color:\"#000\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "776141f47b090538",
                "a2c3ed29c776712e",
                "8c32809773671447"
            ]
        ]
    },
    {
        "id": "d2cc44bf54092f21",
        "type": "ui_button",
        "z": "da07724f8a77bd94",
        "name": "",
        "group": "8434f32f284b7667",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Move Client",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-male",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "ea433f679e50bcd4"
            ]
        ]
    },
    {
        "id": "fdf85c7a8d4d995a",
        "type": "mqtt in",
        "z": "da07724f8a77bd94",
        "g": "fa1f3f939ae5167b",
        "name": "",
        "topic": "uca/iot/piscine",
        "qos": "0",
        "datatype": "utf8",
        "broker": "cf385521e74fa12a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 660,
        "wires": [
            [
                "7fee4dd69ee337ac",
                "957f41ad8f4ee9eb"
            ]
        ]
    },
    {
        "id": "79e17e17bd6621d0",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "g": "fa1f3f939ae5167b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 620,
        "wires": []
    },
    {
        "id": "7fee4dd69ee337ac",
        "type": "json",
        "z": "da07724f8a77bd94",
        "g": "fa1f3f939ae5167b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 700,
        "wires": [
            [
                "8d79a7f6c73419e3",
                "6f5df02fce4baf5a",
                "86c23bf3f05c5a2b"
            ]
        ]
    },
    {
        "id": "776141f47b090538",
        "type": "worldmap-tracks",
        "z": "da07724f8a77bd94",
        "name": "",
        "depth": "6",
        "layer": "combined",
        "smooth": false,
        "x": 650,
        "y": 220,
        "wires": [
            [
                "a2c3ed29c776712e"
            ]
        ]
    },
    {
        "id": "a2c3ed29c776712e",
        "type": "ui_worldmap",
        "z": "da07724f8a77bd94",
        "group": "8434f32f284b7667",
        "order": 2,
        "width": "0",
        "height": "0",
        "name": "",
        "lat": "43.61999752",
        "lon": "7.0499998",
        "zoom": "11",
        "layer": "OSMC",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "true",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,TL,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1220,
        "y": 380,
        "wires": []
    },
    {
        "id": "52e27427cb011778",
        "type": "ui_button",
        "z": "da07724f8a77bd94",
        "g": "2ba75dc7d834e65f",
        "name": "",
        "group": "8434f32f284b7667",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "6ccafce628679297"
            ]
        ]
    },
    {
        "id": "6ccafce628679297",
        "type": "function",
        "z": "da07724f8a77bd94",
        "g": "2ba75dc7d834e65f",
        "name": "Reset Layer",
        "func": "// clear the \"by default\" layer \nmsg.payload = {\"command\": { \"clear\": \"swimming pools\" } };\nflow.set(\"clientid\", null);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "a2c3ed29c776712e"
            ]
        ]
    },
    {
        "id": "86c23bf3f05c5a2b",
        "type": "function",
        "z": "da07724f8a77bd94",
        "g": "fa1f3f939ae5167b",
        "name": "json adapt",
        "func": "//http://stevesnoderedguide.com/node-red-functions\n\nvar nmsg = { // nouveau message \n  topic: msg.topic // on garde l'ancien topic \n};\n\nvar busy;\nif (msg.payload.piscine.occuped === false)\n  busy = \"battery-empty\";\nelse\n  busy = \"battery-full\";\n\nvar hsc;\nif (msg.payload.piscine.hotspot === false)\n  hsc = \"Blue\";\nelse\n  hsc = \"Red\";\n\nvar wl_label = \"Lien de demande d'ouverture de \" + msg.payload.info.ident \n                + \" par \" + flow.get('clientid') + \" : Cliquez moi !\"\nnmsg.payload = { // on modifie/adapte la payload\n  layer: \"swimming pools\",\n  name: msg.payload.info.ident,\n  description: msg.payload.info.user, \n  //weblink: { \"name\": wl_label, \"url\":\"https://localhost:8000/open?idu=\" + flow.get('clientid') + \"&idswp=\" + msg.payload.info.ident},\n  weblink: { \"name\": wl_label, \"url\":\"https://waterbnb-22311680.onrender.com/open?idu=\" + flow.get('clientid') + \"&idswp=\" + msg.payload.info.ident},\n  radius:100,\n  unit: \"C\",\n  color: \"#000\",\n  value: msg.payload.status.temperature,\n  lat: msg.payload.location.gps.lat,\n  lon: msg.payload.location.gps.lon,\n  iconColor: hsc,\n  icon: busy\n}\n\nreturn nmsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            [
                "a2c3ed29c776712e",
                "79e17e17bd6621d0"
            ]
        ]
    },
    {
        "id": "f5d7429b142909fc",
        "type": "http in",
        "z": "da07724f8a77bd94",
        "g": "61f55d09f471d3df",
        "name": "Open",
        "url": "/open",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "1a8a587959353e1d",
                "0868e7875e27bf9e"
            ]
        ]
    },
    {
        "id": "1a8a587959353e1d",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "g": "61f55d09f471d3df",
        "name": "Open debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1060,
        "wires": []
    },
    {
        "id": "0868e7875e27bf9e",
        "type": "http response",
        "z": "da07724f8a77bd94",
        "g": "61f55d09f471d3df",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 520,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1578c3c85b482574",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "d": true,
        "g": "eb248cf8d9bb8b3d",
        "name": "debug 2",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 500,
        "wires": []
    },
    {
        "id": "2bfb64f79adf93d4",
        "type": "ui_form",
        "z": "da07724f8a77bd94",
        "g": "eb248cf8d9bb8b3d",
        "name": "WaterBnB Client Identification",
        "label": "WaterBnB Client Login (= numéro étudiant UCA)",
        "group": "8434f32f284b7667",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Client ID",
                "value": "clientid",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "clientid": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "clientform",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "1578c3c85b482574",
                "559103ed692582ea"
            ]
        ]
    },
    {
        "id": "8c32809773671447",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "385e1853b8df1931",
        "type": "mqtt in",
        "z": "da07724f8a77bd94",
        "g": "e725f092e406a413",
        "name": "",
        "topic": "uca/waterbnb/GillesM/a50",
        "qos": "2",
        "datatype": "utf8",
        "broker": "cd15e03f7a9ee55a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 920,
        "wires": [
            [
                "e3dc83ff8198863c"
            ]
        ]
    },
    {
        "id": "ab820f748ffb8f80",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "g": "e725f092e406a413",
        "name": "debug from owntracks MQTT topic",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 940,
        "wires": []
    },
    {
        "id": "e3dc83ff8198863c",
        "type": "json",
        "z": "da07724f8a77bd94",
        "g": "e725f092e406a413",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 920,
        "wires": [
            [
                "ab820f748ffb8f80",
                "04c03632189f535a"
            ]
        ]
    },
    {
        "id": "04c03632189f535a",
        "type": "function",
        "z": "da07724f8a77bd94",
        "g": "e725f092e406a413",
        "name": "json convert",
        "func": "// Convert json of owntracks to worldmap\nreturn {\n    payload: {\n        layer:\"waterbnb\",\n        name: msg.payload.tid,\n        lat: msg.payload.lat,\n        lon: msg.payload.lon,\n        icon: 'user-circle-o',\n        iconColor : \"Blue\"\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 880,
        "wires": [
            [
                "a2c3ed29c776712e"
            ]
        ]
    },
    {
        "id": "957f41ad8f4ee9eb",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "g": "fa1f3f939ae5167b",
        "name": "debug  from swimming pools",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 640,
        "wires": []
    },
    {
        "id": "68c3f5d9c765cfa7",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "Formulaire d'identification du client",
        "info": "Grâce au formulaire, on positionne une variable globale au flow : l'ident du client qui utilise le service.",
        "x": 1240,
        "y": 480,
        "wires": []
    },
    {
        "id": "559103ed692582ea",
        "type": "function",
        "z": "da07724f8a77bd94",
        "g": "eb248cf8d9bb8b3d",
        "name": "Callback du formulaire d'identification",
        "func": "// Ce node permet de stocker l'identificateur du \n// client dans le flow (un peu comme une variable \n// globale)\n\n\n//https://stevesnoderedguide.com/node-red-variables\n//https://techexplorations.com/guides/esp32/node-red-esp32-project/node-red-messages-variables/\n\nif (msg.topic === \"clientform\"){\n  flow.set(\"clientid\", msg.payload.clientid);\n  }\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1cf252d7010263a1",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "Fichier WaterBnB.json => Dashboard \"donné\" à un client du service WaterBnB",
        "info": "Lorsqu'un client va vouloir accéder à une piscine, il va devoir utiliser cette interface graphique.\n",
        "x": 350,
        "y": 60,
        "wires": []
    },
    {
        "id": "b8140e9b7ea20763",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "Reset display",
        "info": "",
        "x": 650,
        "y": 320,
        "wires": []
    },
    {
        "id": "db38ce7ecf71cec5",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "Affichage avec hyperlien d'ouverture des piscines ",
        "info": "",
        "x": 1280,
        "y": 620,
        "wires": []
    },
    {
        "id": "3801a2299c2f4d69",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "Pour tester la réception de la demande d'ouverture",
        "info": "",
        "x": 890,
        "y": 1080,
        "wires": []
    },
    {
        "id": "163f5becc8c61197",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "Affichage de la géolocalisation du client de WaterBnB",
        "info": "",
        "x": 1120,
        "y": 860,
        "wires": []
    },
    {
        "id": "bfa205f8ecd37793",
        "type": "comment",
        "z": "da07724f8a77bd94",
        "name": "trois choses à paramétrer => le topic de owntracks, le lien de demande d'ouverture et l'ID du client via le formulaire",
        "info": "Lorsqu'un client va vouloir accéder à une piscine, il va devoir utiliser cette interface graphique.\n",
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "8d79a7f6c73419e3",
        "type": "debug",
        "z": "da07724f8a77bd94",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 780,
        "wires": []
    },
    {
        "id": "ab44aa0947b46483",
        "type": "ui_toast",
        "z": "da07724f8a77bd94",
        "g": "fa1f3f939ae5167b",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "Invalid Json",
        "name": "Invalid_Json",
        "x": 810,
        "y": 720,
        "wires": []
    },
    {
        "id": "55b6618fb271a0b2",
        "type": "switch",
        "z": "da07724f8a77bd94",
        "d": true,
        "g": "fa1f3f939ae5167b",
        "name": "isValid",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 700,
        "wires": [
            [
                "86c23bf3f05c5a2b"
            ],
            [
                "ab44aa0947b46483"
            ]
        ]
    },
    {
        "id": "6f5df02fce4baf5a",
        "type": "function",
        "z": "da07724f8a77bd94",
        "d": true,
        "g": "fa1f3f939ae5167b",
        "name": "json_valid",
        "func": "var expectedStructure = {\n    \"status\": {     \n        \"temperature\": null, \n        \"light\": null,\n        \"regul\": null,\n        \"fire\": null,\n        \"heat\": null,\n        \"cold\": null\n    },\n    \"location\": {\n        \"room\": null,\n        \"gps\": {     \n            \"lat\": null,\n            \"lon\": null  \n        },\n        \"address\": null\n    },\n    \"regul\": {\n        \"lt\": null,\n        \"ht\": null,\n    },\n    \"info\": {\n        \"ident\": null,\n        \"loc\": null,\n        \"user\": null,\n    },\n    \"net\": {\n        \"uptime\": null,\n        \"ssid\": null,\n        \"mac\": null,\n        \"ip\": null,\n    },\n    \"reporthost\": {\n        \"target_ip\": null,\n        \"target_port\": null,\n        \"sp\": null\n    },\n    \"piscine\": {\n        \"hotspot\": null,\n        \"occuped\": null,\n    }       \n};\n\n\n// Recursive function to check structure\nfunction isValidStructure(obj, expected) {\n    for (var key in expected) {\n        if (!obj.hasOwnProperty(key)) {\n            node.warn(\"Missing key: \" + key); // Debug message\n            return false; // Key is missing\n        }\n        if (typeof expected[key] === 'object' && expected[key] !== null && !(expected[key] instanceof Array)) {\n            // It's a nested object, not an array, so check its structure recursively\n            if (!isValidStructure(obj[key], expected[key])) {\n                node.warn(\"Invalid structure in key: \" + key); // Debug message\n                return false; // Nested structure doesn't match\n            }\n        } else if (expected[key] === null && typeof obj[key] !== 'object') {\n            // It's a final value, proceed\n            continue;\n        } else {\n            // Mismatch in expected type\n            node.warn(\"Type mismatch in key: \" + key); // Debug message\n            return false;\n        }\n    }\n    return true; // All keys matched\n}\n\nif (isValidStructure(msg.payload, expectedStructure)) {\n    msg.isValid = true;\n} else {\n    msg.isValid = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "55b6618fb271a0b2"
            ]
        ]
    },
    {
        "id": "8434f32f284b7667",
        "type": "ui_group",
        "z": "da07724f8a77bd94",
        "name": "Service WaterBnB :",
        "tab": "151a2208e0662dac",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf385521e74fa12a",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "Amine",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cd15e03f7a9ee55a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.eclipseprojects.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "151a2208e0662dac",
        "type": "ui_tab",
        "z": "da07724f8a77bd94",
        "name": "WaterBnB",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]